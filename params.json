{"name":"Dynamic Database Config for CakePHP","tagline":"Plugin for flexible datasource configs","body":"## API Documentation\r\n\r\nCheck out [Dynamic Database Config API Documentation](http://imsamurai.github.io/CakePHP-DynamicDatabaseConfig/docs/master/)\r\n\r\n## Abstract\r\n\r\n[![Build Status](https://travis-ci.org/imsamurai/CakePHP-DynamicDatabaseConfig.png)](https://travis-ci.org/imsamurai/CakePHP-DynamicDatabaseConfig) [![Coverage Status](https://coveralls.io/repos/imsamurai/CakePHP-DynamicDatabaseConfig/badge.png?branch=master)](https://coveralls.io/r/imsamurai/CakePHP-DynamicDatabaseConfig?branch=master) [![Latest Stable Version](https://poser.pugx.org/imsamurai/dynamic-database-config/v/stable.png)](https://packagist.org/packages/imsamurai/dynamic-database-config) [![Total Downloads](https://poser.pugx.org/imsamurai/dynamic-database-config/downloads.png)](https://packagist.org/packages/imsamurai/dynamic-database-config) [![Latest Unstable Version](https://poser.pugx.org/imsamurai/dynamic-database-config/v/unstable.png)](https://packagist.org/packages/imsamurai/dynamic-database-config) [![License](https://poser.pugx.org/imsamurai/dynamic-database-config/license.png)](https://packagist.org/packages/imsamurai/dynamic-database-config)\r\n\r\n\r\nCakePHP DynamicDatabaseConfig Plugin for more flexible handle datasource configs\r\n\r\n## Installation\r\n\r\n### Step 1: Clone or download to `Plugin/DynamicDatabaseConfig`\r\n\r\n  cd my_cake_app/app git://github.com/imsamurai/CakePHP-DynamicDatabaseConfig.git Plugin/DynamicDatabaseConfig\r\n\r\nor if you use git add as submodule:\r\n\r\n\tcd my_cake_app\r\n\tgit submodule add \"git://github.com/imsamurai/CakePHP-DynamicDatabaseConfig.git\" \"app/Plugin/DynamicDatabaseConfig\"\r\n\r\nthen update submodules:\r\n\r\n\tgit submodule init\r\n\tgit submodule update\r\n\r\n### Step 2: Extend your DATABASE_CONFIG\r\n\r\n```\r\n:: database.php ::\r\n```\r\n```php\r\nApp::uses('DynamicDatabaseConfig', 'DynamicDatabaseConfig.Config');\r\nclass DATABASE_CONFIG extends DynamicDatabaseConfig {\r\n\t//class items\r\n}\r\n```\r\n\r\nThen make configs that you want to be dynamically loaded (when class instance will be created)\r\n\r\n```\r\n:: database.php ::\r\n```\r\n```php\r\nApp::uses('DynamicDatabaseConfig', 'DynamicDatabaseConfig.Config');\r\nclass DATABASE_CONFIG extends DynamicDatabaseConfig {\r\n\t//can't start with _ and must be public\r\n\tpublic defaultPublic() {\r\n\t\treturn array(/* config data, like in property-config */);\r\n\t}\r\n}\r\n\r\n```\r\n\r\n### Step 3: Load plugin\r\n\r\n```\r\n:: bootstrap.php ::\r\n```\r\n```php\r\nCakePlugin::load('DynamicDatabaseConfig');\r\n\r\n```\r\n\r\n##Usage\r\n\r\nOnce you add public methods in your DATABASE_CONFIG they will be automatically assigned to public property with same name.\r\nNow you can easily make new configs based on part of existing configs. Your old property-based configs will work as usual,\r\nunless you create method with same name.\r\n\r\n##Advanced usage\r\n\r\nThere exist simple dynamic rename of configs.\r\nAssume you want add default config, config for test and public enviroument. In your models used `default` config and you have\r\ninformation about is this public or test, for ex. constant `IS_PUBLIC_INSTALLATION`. In this case you need to add 3 configs,\r\nallow renaming and make renaming action:\r\n\r\n```\r\n:: database.php ::\r\n```\r\n```php\r\nApp::uses('DynamicDatabaseConfig', 'DynamicDatabaseConfig.Config');\r\nclass DATABASE_CONFIG extends DynamicDatabaseConfig {\r\n\r\n\t//allow to rename configs\r\n\tconst APPLY_NAMING_SCHEMA = true;\r\n\r\n\t//default config\r\n\tpublic default() {\r\n\t\treturn array(/* config data, like in property-config */);\r\n\t}\r\n\r\n\t//public config\r\n\tpublic defaultPublic() {\r\n\t\treturn array(/* config data, like in property-config */);\r\n\t}\r\n\r\n\t/local config\r\n\tpublic defaultLocal() {\r\n\t\treturn array(/* config data, like in property-config */);\r\n\t}\r\n\r\n\t/* Method that will get each existing config name and try to rename it\r\n\t * if $configName will not equals to returned value then\r\n\t * config with returned value name will be erased with data from $configName\r\n     *\r\n\t * In case of current method if IS_PUBLIC_INSTALLATION is true\r\n\t * `default` config gets data from `defaultPublic` otherwise from `defaultLocal`\r\n\t */\r\n\tprotected function _renameConfig($configName) {\r\n\t\t$postfix = IS_PUBLIC_INSTALLATION ? 'Public' : 'Local';\r\n\t\treturn preg_replace('/(.*)' . $postfix . '$/', '\\1', $configName);\r\n\t}\r\n}\r\n```\r\n\r\nThats all! If you have questions or any suggestions you welcome at [issues](https://github.com/imsamurai/CakePHP-DynamicDatabaseConfig/issues).\r\n","google":"UA-54309823-1","note":"Don't delete this file! It's used internally to help with page regeneration."}